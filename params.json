{
  "name": "Lulo",
  "tagline": "A plugin engine for Amazon CloudFormation Custom Resources",
  "body": "# lulo\r\n\r\nlulo is a tiny plugin based framework for working with AWS CloudFormation Custom Resources.\r\nlulo itself doesn't do much but is easily extended by registering plugins.\r\n\r\n## Installation\r\n```\r\n$ npm install lulo --save\r\n```\r\n\r\n## Usage\r\n### Example Lambda index.js\r\n```node\r\n'use strict';\r\n\r\nvar Lulo = require('lulo');\r\nvar lulo = Lulo({ logEvents: true, logResponse: true })\r\n    .register('PluginNameSpace', require('lulo-plugin-name'))\r\n    .register('AnotherPluginNameSpace', require('lulo-plugin-name-2'));\r\n\r\nexports.handler = function (event, context, callback) {\r\n    lulo.handler(event, context, callback);\r\n};\r\n```\r\n(Yes, that is all the nodejs code you have to write)\r\n\r\nPackage your index.js and node_modules and deploy to Lambda (NodeJs4.3 runtime).\r\n\r\n### AWS CloudFormation template\r\n```javascript\r\n{\r\n    \"MyCustomResourceName\": {\r\n        \"Type\": \"Custom::PluginNameSpace\",\r\n        \"Properties\": {\r\n            \"ServiceToken\": \"{LAMBDA_ARN}\",\r\n            ...\r\n        }\r\n    },\r\n    \"MyOtherCustomResourceName\": {\r\n        \"Type\": \"Custom::AnotherPluginNameSpace\",\r\n        \"Properties\": {\r\n            \"ServiceToken\": \"{LAMBDA_ARN}\",\r\n            ...\r\n        }\r\n    }\r\n}\r\n```\r\nSee the [/example](example) for a complete example\r\n\r\n#### How it works\r\nWhen you register a plugin you want to use you give it a name.\r\nTo invoke the plugin you name your Custom Resource `Custom::RegisteredPluginName`.\r\n\r\nEach plugin works in different ways and may yield different types of results that you can interact with\r\nin your templates.\r\n\r\n## Plugins\r\n### List of available plugins\r\n\r\n* [Stack-Properties](https://github.com/carlnordenfelt/lulo-plugin-stack-properties): Yields Parameters, Outputs and Resources given another CloudFormation StackId or StackName.\r\n\r\n### How to write a plugin\r\n#### Plugin API\r\nEach plugin must expse the following functions:\r\n```\r\nvalidate(event);\r\ncreate(event, context, callback);\r\ndelete(event, context, callback);\r\nupdate(event, context, callback);\r\n```\r\n##### validate(event)\r\nValidate the incoming event.\r\nvalidate is not expected to return anything but it is expected to\r\n`throw Error(message)` on validation error.\r\n\r\n##### create(event, context, callback)\r\nInvoked when the custom resource is created.\r\n\r\n##### update(event, context, callback)\r\nInvoked when the custom resource is updated.\r\n\r\n##### delete(event, context, callback)\r\nInvoked when the custom resource is deleted.\r\n\r\n##### Return values\r\nReturn values are provided as a *flat* object, keys cannot be nested.\r\nIf you need to namespace return values from a plugin, use dot.notation in the object keys.\r\n\r\nIf you want to set the PhysicalResourceId of the CustomResource, set\r\n`response.physicalResourceId` to the value you want.\r\n\r\nYour plugins are expected to run on the `NodeJS4.3` Lambda runtime.\r\n\r\n#### Document permissions\r\nRemember to document any additional IAM permissions your plugin requires.\r\n\r\n#### List your plugin here\r\nUpdate the README and submit a pull request to get your plugin listed here.\r\n\r\n## Why Lulo?\r\nBecause it's a [very healthy fruit](https://en.wikipedia.org/wiki/Solanum_quitoense) :)\r\n\r\n## License\r\n[The MIT License (MIT)](/LICENSE)\r\n\r\n## Change Log\r\n[Change Log](/CHANGELOG.md)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}